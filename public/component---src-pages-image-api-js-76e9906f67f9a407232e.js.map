{"version":3,"sources":["webpack:///component---src-pages-image-api-js-76e9906f67f9a407232e.js","webpack:///./src/pages/image-api.js"],"names":["webpackJsonp","236","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","pageQuery","undefined","_react","_react2","_gatsbyImage","_gatsbyImage2","_typography","props","assets","data","allContentfulAsset","edges","createElement","href","map","_ref","_ref$node","node","title","resize","key","src","alt","width","height","style","marginRight","rhythm","marginBottom","border","background","padding","dangerouslySetInnerHTML","__html","_ref2","_ref2$node","resolutions","backgroundColor","_ref3","_ref3$node","resizing","_ref4","_ref4$node","sizes"],"mappings":"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","file":"component---src-pages-image-api-js-76e9906f67f9a407232e.js","sourcesContent":["webpackJsonp([254165260642004],{\n\n/***/ 236:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\texports.pageQuery = undefined;\n\t\n\tvar _react = __webpack_require__(4);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _gatsbyImage = __webpack_require__(69);\n\t\n\tvar _gatsbyImage2 = _interopRequireDefault(_gatsbyImage);\n\t\n\tvar _typography = __webpack_require__(44);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = function (props) {\n\t  var assets = props.data.allContentfulAsset.edges;\n\t  return _react2.default.createElement(\n\t    \"div\",\n\t    null,\n\t    _react2.default.createElement(\n\t      \"h1\",\n\t      null,\n\t      \"Image API examples\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"Gatsby offers rich integration with\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://www.contentful.com/developers/docs/references/images-api/\" },\n\t        \"Contentful's Image API\"\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"Open Graph\",\n\t      _react2.default.createElement(\n\t        \"em\",\n\t        null,\n\t        \"i\"\n\t      ),\n\t      \"QL on your own site to experiment with the following options\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"Resize\"\n\t    ),\n\t    assets.map(function (_ref) {\n\t      var _ref$node = _ref.node,\n\t          title = _ref$node.title,\n\t          resize = _ref$node.resize;\n\t      return _react2.default.createElement(\"img\", {\n\t        key: resize.src,\n\t        alt: title,\n\t        src: resize.src,\n\t        width: resize.width,\n\t        height: resize.height,\n\t        style: {\n\t          marginRight: (0, _typography.rhythm)(1 / 2),\n\t          marginBottom: (0, _typography.rhythm)(1 / 2),\n\t          border: \"1px solid tomato\"\n\t        }\n\t      });\n\t    }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"GraphQL query\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"pre\",\n\t      { style: { background: \"#efeded\", padding: (0, _typography.rhythm)(3 / 4) } },\n\t      _react2.default.createElement(\"code\", {\n\t        dangerouslySetInnerHTML: {\n\t          __html: \"{\\n              allContentfulAsset {\\n                edges {\\n                  node {\\n                    title\\n                    resize(width: 100) {\\n                      src\\n                      width\\n                      height\\n                    }\\n                  }\\n                }\\n              }\\n            }\"\n\t        }\n\t      })\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"Responsive Resolution\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"If you make queries with \",\n\t      _react2.default.createElement(\n\t        \"code\",\n\t        null,\n\t        \"resolutions\"\n\t      ),\n\t      \" then Gatsby automatically generates images with 1x, 1.5x, 2x, and 3x versions so your images look great on whatever screen resolution of device they're on.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"If you're on a retina class screen, notice how much sharper these images are than the above \\\"resized\\\" images.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"You should prefer this operator over \",\n\t      _react2.default.createElement(\n\t        \"code\",\n\t        null,\n\t        \"resize\"\n\t      ),\n\t      \".\"\n\t    ),\n\t    assets.map(function (_ref2) {\n\t      var _ref2$node = _ref2.node,\n\t          title = _ref2$node.title,\n\t          resolutions = _ref2$node.resolutions;\n\t      return _react2.default.createElement(_gatsbyImage2.default, {\n\t        key: resolutions.src,\n\t        alt: title,\n\t        resolutions: resolutions,\n\t        backgroundColor: true,\n\t        style: {\n\t          marginRight: (0, _typography.rhythm)(1 / 2),\n\t          marginBottom: (0, _typography.rhythm)(1 / 2),\n\t          border: \"1px solid tomato\"\n\t        }\n\t      });\n\t    }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"GraphQL query\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"pre\",\n\t      { style: { background: \"#efeded\", padding: (0, _typography.rhythm)(3 / 4) } },\n\t      _react2.default.createElement(\"code\", {\n\t        dangerouslySetInnerHTML: {\n\t          __html: \"{\\n                      allContentfulAsset {\\n                        edges {\\n                          node {\\n                            title\\n                            resolutions(width: 100) {\\n                              width\\n                              height\\n                              src\\n                              srcSet\\n                            }\\n                          }\\n                        }\\n                      }\\n                    }\"\n\t        }\n\t      })\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"Resizing\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"On both resize and resolutions you can also add a\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"code\",\n\t        null,\n\t        \"height\"\n\t      ),\n\t      \" \",\n\t      \"argument to the GraphQL argument to crop the image to a certain size.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"You can also set the\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping/change-the-resizing-behavior\" },\n\t        \"resizing behavior\"\n\t      ),\n\t      \" \",\n\t      \"and\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping/specify-focus-area-for-resizing\" },\n\t        \"resizing focus area\"\n\t      )\n\t    ),\n\t    assets.map(function (_ref3) {\n\t      var _ref3$node = _ref3.node,\n\t          title = _ref3$node.title,\n\t          resizing = _ref3$node.resizing;\n\t      return _react2.default.createElement(_gatsbyImage2.default, {\n\t        key: resizing.src,\n\t        alt: title,\n\t        resolutions: resizing,\n\t        style: {\n\t          marginRight: (0, _typography.rhythm)(1 / 2),\n\t          marginBottom: (0, _typography.rhythm)(1 / 2),\n\t          border: \"1px solid tomato\"\n\t        }\n\t      });\n\t    }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"GraphQL query\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"pre\",\n\t      { style: { background: \"#efeded\", padding: (0, _typography.rhythm)(3 / 4) } },\n\t      _react2.default.createElement(\"code\", {\n\t        dangerouslySetInnerHTML: {\n\t          __html: \"{\\n                      allContentfulAsset {\\n                        edges {\\n                          node {\\n                            title\\n                            resolutions(width: 100, height: 100) {\\n                              width\\n                              height\\n                              src\\n                              srcSet\\n                            }\\n                          }\\n                        }\\n                      }\\n                    }\"\n\t        }\n\t      })\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"Responsive Sizes\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"This GraphQL option allows you to generate responsive images that automatically respond to different device screen resolution and widths. E.g. a smartphone browser will download a much smaller image than a desktop device.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"Instead of specifying a width and height, with sizes you specify a\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"code\",\n\t        null,\n\t        \"maxWidth\"\n\t      ),\n\t      \", the max width the container of the images reaches.\"\n\t    ),\n\t    assets.map(function (_ref4) {\n\t      var _ref4$node = _ref4.node,\n\t          title = _ref4$node.title,\n\t          sizes = _ref4$node.sizes;\n\t      return _react2.default.createElement(_gatsbyImage2.default, {\n\t        key: sizes.src,\n\t        alt: title,\n\t        sizes: sizes,\n\t        style: {\n\t          marginRight: (0, _typography.rhythm)(1 / 2),\n\t          marginBottom: (0, _typography.rhythm)(1 / 2),\n\t          border: \"1px solid tomato\"\n\t        }\n\t      });\n\t    }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"GraphQL query\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"pre\",\n\t      { style: { background: \"#efeded\", padding: (0, _typography.rhythm)(3 / 4) } },\n\t      _react2.default.createElement(\"code\", {\n\t        dangerouslySetInnerHTML: {\n\t          __html: \"{\\n                      allContentfulAsset {\\n                        edges {\\n                          node {\\n                            title\\n                            sizes(maxWidth: 613) {\\n                              sizes\\n                              src\\n                              srcSet\\n                            }\\n                          }\\n                        }\\n                      }\\n                    }\"\n\t        }\n\t      })\n\t    )\n\t  );\n\t};\n\t\n\tvar pageQuery = exports.pageQuery = \"** extracted graphql fragment **\";\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-image-api-js-76e9906f67f9a407232e.js","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { rhythm } from \"../utils/typography\"\n\nexport default props => {\n  const assets = props.data.allContentfulAsset.edges\n  return (\n    <div>\n      <h1>Image API examples</h1>\n      <p>\n        Gatsby offers rich integration with{` `}\n        <a href=\"https://www.contentful.com/developers/docs/references/images-api/\">\n          Contentful's Image API\n        </a>\n      </p>\n      <p>\n        Open Graph<em>i</em>QL on your own site to experiment with the following\n        options\n      </p>\n      <h2>Resize</h2>\n      {assets.map(({ node: { title, resize } }) => (\n        <img\n          key={resize.src}\n          alt={title}\n          src={resize.src}\n          width={resize.width}\n          height={resize.height}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: rhythm(1 / 2),\n            border: `1px solid tomato`,\n          }}\n        />\n      ))}\n      <h4>GraphQL query</h4>\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\n        <code\n          dangerouslySetInnerHTML={{\n            __html: `{\n              allContentfulAsset {\n                edges {\n                  node {\n                    title\n                    resize(width: 100) {\n                      src\n                      width\n                      height\n                    }\n                  }\n                }\n              }\n            }`,\n          }}\n        />\n      </pre>\n\n      <h2>Responsive Resolution</h2>\n      <p>\n        If you make queries with <code>resolutions</code> then Gatsby\n        automatically generates images with 1x, 1.5x, 2x, and 3x versions so\n        your images look great on whatever screen resolution of device they're\n        on.\n      </p>\n      <p>\n        If you're on a retina class screen, notice how much sharper these images\n        are than the above \"resized\" images.\n      </p>\n      <p>\n        You should prefer this operator over <code>resize</code>.\n      </p>\n      {assets.map(({ node: { title, resolutions } }) => (\n        <Img\n          key={resolutions.src}\n          alt={title}\n          resolutions={resolutions}\n          backgroundColor\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: rhythm(1 / 2),\n            border: `1px solid tomato`,\n          }}\n        />\n      ))}\n      <h4>GraphQL query</h4>\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\n        <code\n          dangerouslySetInnerHTML={{\n            __html: `{\n                      allContentfulAsset {\n                        edges {\n                          node {\n                            title\n                            resolutions(width: 100) {\n                              width\n                              height\n                              src\n                              srcSet\n                            }\n                          }\n                        }\n                      }\n                    }`,\n          }}\n        />\n      </pre>\n\n      <h2>Resizing</h2>\n      <p>\n        On both resize and resolutions you can also add a{` `}\n        <code>height</code>\n        {` `}\n        argument to the GraphQL argument to crop the image to a certain size.\n      </p>\n      <p>\n        You can also set the{` `}\n        <a href=\"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping/change-the-resizing-behavior\">\n          resizing behavior\n        </a>\n        {` `}\n        and{` `}\n        <a href=\"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping/specify-focus-area-for-resizing\">\n          resizing focus area\n        </a>\n      </p>\n      {assets.map(({ node: { title, resizing } }) => (\n        <Img\n          key={resizing.src}\n          alt={title}\n          resolutions={resizing}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: rhythm(1 / 2),\n            border: `1px solid tomato`,\n          }}\n        />\n      ))}\n      <h4>GraphQL query</h4>\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\n        <code\n          dangerouslySetInnerHTML={{\n            __html: `{\n                      allContentfulAsset {\n                        edges {\n                          node {\n                            title\n                            resolutions(width: 100, height: 100) {\n                              width\n                              height\n                              src\n                              srcSet\n                            }\n                          }\n                        }\n                      }\n                    }`,\n          }}\n        />\n      </pre>\n\n      <h2>Responsive Sizes</h2>\n      <p>\n        This GraphQL option allows you to generate responsive images that\n        automatically respond to different device screen resolution and widths.\n        E.g. a smartphone browser will download a much smaller image than a\n        desktop device.\n      </p>\n      <p>\n        Instead of specifying a width and height, with sizes you specify a{` `}\n        <code>maxWidth</code>, the max width the container of the images\n        reaches.\n      </p>\n      {assets.map(({ node: { title, sizes } }) => (\n        <Img\n          key={sizes.src}\n          alt={title}\n          sizes={sizes}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: rhythm(1 / 2),\n            border: `1px solid tomato`,\n          }}\n        />\n      ))}\n      <h4>GraphQL query</h4>\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\n        <code\n          dangerouslySetInnerHTML={{\n            __html: `{\n                      allContentfulAsset {\n                        edges {\n                          node {\n                            title\n                            sizes(maxWidth: 613) {\n                              sizes\n                              src\n                              srcSet\n                            }\n                          }\n                        }\n                      }\n                    }`,\n          }}\n        />\n      </pre>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ImageAPIExamples {\n  allContentfulAsset(filter: {node_locale: {eq: \"en-US\"}}) {\n    edges {\n      node {\n        title\n        resize {\n          src\n          width\n          height\n        }\n        resolutions(width: 100) {\n          ...GatsbyContentfulResolutions_noBase64\n        }\n        resizing: resolutions(width: 100, height: 100) {\n          ...GatsbyContentfulResolutions_noBase64\n        }\n        sizes(maxWidth: 613) {\n          ...GatsbyContentfulSizes_noBase64\n        }\n      }\n    }\n  }\n}\n`\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/image-api.js"],"sourceRoot":""}